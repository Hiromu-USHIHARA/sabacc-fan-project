# Sabacc（サバック）実装仕様書：プレイヤー vs ディーラー（CPU）

## 概要
本仕様書は、スター・ウォーズに登場するカードゲーム「Sabacc」を2人対戦形式（プレイヤー vs ディーラー）でシンプルに実装するための技術的仕様を示します。

---

## 1. カード構成

### 1.1 スタンダードカード（60枚）
- スート（suit）: Flasks, Sabers, Staves, Coins（各15枚）
- 各スートのカード構成：
  - 数字カード: 1〜11
  - 額面カード:
    - Commander（12）
    - Mistress（13）
    - Master（14）
    - Ace（15）

### 1.2 特殊カード（16枚）
- 以下の8種類のカードが2枚ずつ存在（合計16枚）
  - Balance: -11
  - The Idiot: 0
  - Endurance: -8
  - Moderation: -14
  - The Evil One: -15
  - The Queen of Air and Darkness: -2
  - Demise: -13
  - The Star: -10（本実装では固定）

---

## 2. プレイヤー構成
- プレイヤー数：2（プレイヤーとCPUディーラー）
- 各プレイヤーは最大5枚まで手札を持てる
- 初期手札は2枚（山札から交互に配布）

---

## 3. ゲームフロー

### 3.1 初期化
- 山札（deck）をシャッフル
- 各プレイヤーに2枚ずつ配布（交互）

### 3.2 プレイヤーターン
プレイヤーは以下の行動を選択できる（1アクションのみ）：
1. ドロー（カードを1枚引く）
2. 交換（手札1枚と山札のトップカードを交換）
3. スタンド（以降の行動を放棄して手札を確定）
4. ロック（手札から1枚をロックしSabacc Shiftから保護）

### 3.3 ディーラー（CPU）ターン
以下のルールに基づいて自動行動：
- 合計が15未満 → ドロー
- 合計15〜20 → 交換またはロック
- 合計21以上 → スタンドまたはロック

---

## 4. Sabacc Shift（確率イベント）
- ラウンド終了時に25%の確率で発生
- ロックされていないカードはランダムなスート＆値に変更される

---

## 5. 勝敗判定

### 5.1 合計計算
- 手札の合計値を算出
- 目標は±23に近いこと
- ±24以上の合計値は「爆発（Bomb Out）」として即敗北

### 5.2 特別な勝利条件
- Idiot’s Array（The Idiot + 数値2 + 数値3） → 即勝利
- Pure Sabacc（23 or -23） → 特別勝利（通常勝利より優先）

### 5.3 引き分け
- 合計値が等しい場合はランダムに勝者決定（ダイスロール）

---

## 6. データ構造

### 6.1 カード
- id: ユニークID
- name: カード名
- suit: スート名（特殊カードはnull）
- value: 数値（整数）

### 6.2 プレイヤー
- hand: List[Card]
- locked_card: Optional[Card]
- has_stood: bool

### 6.3 デッキ
- 山札: List[Card]
- シャッフル関数
- ドロー関数
- トップとの交換機能

---

## 7. 実装要件

### 7.1 必須機能
- ゲーム状態管理（初期化、ターン処理、終了処理）
- ユーザー操作受付（CLIまたはGUI）
- ディーラーの自動行動処理
- 勝敗ロジック

### 7.2 オプション機能（将来追加）
- ポット・賭け金管理
- 複数プレイヤー対応
- グラフィカルUIまたはWebUI
- チート手段（Skifter）

---

## 8. 使用想定技術（例）
- Python3 / JavaScript
- GUI: Tkinter / React / Webベース
- ゲームロジックモジュール化推奨

---

以上。